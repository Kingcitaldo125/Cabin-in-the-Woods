//#extension GL_EXT_draw_buffers:require
precision highp float;

uniform sampler2D basetexture;
uniform samplerCube skyTexture;
uniform float mode;

uniform vec4 eyePos;
uniform vec4 lightPos;
uniform vec4 lightColor;
uniform sampler2D normalmap;
uniform mat4 worldMatrix;

uniform mat4 light_viewMatrix;
uniform mat4 light_projMatrix;
uniform vec3 light_hitheryon;
uniform float scale_factor;
uniform float magic_constant;
uniform sampler2D shadowbuffer;
uniform vec3 hitheryon;

varying vec2 oTexcoords;
//varying vec2 v_texcoord;
varying vec4 oWorldPos;
//varying vec4 v_worldPos;
varying vec3 oNormal;
//varying vec4 v_normal;
varying vec3 oTangent;

varying float v_viewPosz;

vec4 mtl = vec4(0.0,0.0,0.0,0.0);
vec4 specmtl = vec4(0.0,0.0,0.0,1.0);
vec4 diffusemtl = vec4(0.0,0.0,0.0,1.0);

vec4 pack(vec4 v,vec4 mn, vec4 mx)
{
    return (v-mn)/(mx-mn);
}

vec4 pack(vec4 v)
{
    return pack(v,vec4(-1.0),vec4(1.0));
}

void main()
{
	vec3 bmap = texture2D(normalmap,oTexcoords.st).xyz;
	
	bmap *= 2.0;
	bmap -= vec3(1.0,1.0,1.0);
	bmap = normalize(bmap);
	
	// Gram-Schmidt
	vec3 N = normalize(oNormal);
	vec3 T = normalize(oTangent);
	T = T - dot(T,N)*N;
	T = normalize(T);
	
	vec3 B = cross(N,T);
	B = normalize(B);
	
	mat3 TangentNormal = mat3(T.x,B.x,N.x,
							  T.y,B.y,N.y,
							  T.z,B.z,N.z);
		 
	N = bmap * TangentNormal;
	
	N = (vec4(N.xyz,0.0) * worldMatrix).xyz;
	N = normalize(N);
	
	vec3 V = eyePos.xyz - oWorldPos.xyz;
	float eyeDist = length(V);
	V = 1.0/eyeDist*V;
	
	//vec3 N = normalize(oNormal);
	vec4 texc = texture2D(basetexture,oTexcoords);
	//vec4 shadowtexc = texture2D(skyTexture,oTexcoords);
	vec4 shadowtex = texture2D(shadowbuffer,oTexcoords);
    
	if(mode == 0.0)
	{
		gl_FragColor = pack(oWorldPos);
	}
	else if(mode == 1.0)
	{
		gl_FragColor = pack(vec4(N,mtl.a));
	}
	else if(mode == 2.0)
	{
		gl_FragColor = pack(texc);
	}
	else if(mode == 3.0)
	{
		//gl_FragColor = texc;
		gl_FragColor = pack(mtl.aaaa,vec4(1.0),vec4(128.0));
	}
	else if(mode == 4.0)
	{
		float big,mid,low;
		float packz = v_viewPosz;
		packz = (packz - hitheryon[0]) / hitheryon[2];
		if(packz >= 1.0)
		{
			big = 1.0;
			mid=big;
			low=mid;
		}
		else if(packz <= 0.0)
		{
			big = 0.0;
			mid=big;
			low=mid;
		}
		else
		{
			big = packz;
			mid = fract(packz*256.0);
			low = fract(mid*256.0);
		}
		gl_FragColor = vec4(floor(big),floor(mid),floor(low),1.0);
	}
}
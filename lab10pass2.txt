//lab10 D.R. pass two
precision highp float;

//uniform samplerCube basetexture;

uniform sampler2D btexture;

uniform sampler2D position_texture;
uniform sampler2D normal_texture;
uniform sampler2D color_texture;
uniform sampler2D specular_texture;

uniform sampler2D shadowbuffer;
uniform sampler2D btexturetemp;

uniform float ddraw;
uniform float magic_constant;
uniform float scale_factor;

#define MAX_LIGHTS 1;

uniform vec4 eyePos;
uniform vec4 lightPos;
uniform vec4 lightColor;
uniform mat4 worldMatrix;
uniform mat4 light_viewMatrix;
uniform mat4 light_projMatrix;
uniform vec3 light_hitheryon;

varying vec2 vtexcoords;
varying vec3 oNormal;
varying vec3 oTangent;
varying vec3 oWorldPos;
varying vec4 v_worldPos;

vec4 diffusemtl = vec4(0.0,0.0,0.0,1.0);
vec4 specularmtl = vec4(0.0,0.0,0.0,1.0);

vec4 unpack(vec4 v, vec4 mn, vec4 mx)
{
    return mn + v * (mx-mn);
}

vec4 unpack(vec4 v)
{
    return unpack( v, vec4(-1.0), vec4(1.0));
}

void main()
{
	vec4 worldPos = texture2D(position_texture,vtexcoords);
    vec4 normal = texture2D(normal_texture,vtexcoords);
    vec4 color = texture2D(color_texture,vtexcoords);
    vec4 specular = texture2D(specular_texture,vtexcoords);
	vec4 shadows = texture2D(shadowbuffer,vtexcoords);
    
	// Deferred lighting math
	
    worldPos = unpack(worldPos);
    vec3 N = unpack(normal).xyz;
    color = unpack(color);
	specular = unpack(specular,vec4(1.0),vec4(128.0));
	
	// Shadow Buffer
	vec3 nn = normalize(oNormal);
        
    vec3 vv = eyePos.xyz - v_worldPos.xyz;
    vv = normalize(vv);
	
	vec3 L = lightPos.xyz - v_worldPos.xyz;
    L = normalize(L);
	vec3 R = reflect(-L.xyz,nn.xyz);
	
	// The Receiver
	vec4 tmp = worldPos * light_viewMatrix;
    float z1 = tmp.z;
    z1 = -z1;
    z1 = (z1-light_hitheryon[0]) / light_hitheryon[2];
    z1 *= scale_factor;
    
    tmp = tmp * light_projMatrix;
    tmp.xy /= tmp.w;
    tmp.xy = 0.5 * (tmp.xy + vec2(1.0));
    
    //the occluder
    float z22 = texture2D(shadowbuffer,tmp.xy).r;
	
    z22 = abs(z22);
	
	float c = magic_constant;
    float litpct;
    litpct = exp(c*(z22-z1));
    litpct = clamp(litpct,0.0,1.0);
	//litpct = 0.5;
	
	float dp = clamp( dot(L,nn) , 0.0, 1.0);
	
	vec3 diffuse;
	vec3 ambient = vec3(0.0,0.0,0.0);
	vec3 difff = litpct * dp * lightColor.rgb;
	vec3 speck = vec3(0.0,0.0,0.0);
	
	diffuse = litpct * dp * lightColor.rgb;
	//diffuse = dp*lightColor.rgb;
	
	float spp = dot(vv,R);
	spp = clamp(spp,0.0,1.0);
	spp = pow(spp,specularmtl.a);
	spp = spp * sign(dp); // no spec if light cant see surface
	speck = litpct * spp * lightColor.rgb;
	
	// Deferred Parts
	float shininess = specular.r;
	vec3 tempspeck = vec3(0.0,0.0,0.0);
	vec3 Lone = normalize(lightPos.xyz - worldPos.xyz);
	float dppp = clamp(dot(Lone.xyz,N.xyz),0.0,1.0);
	vec3 V = (eyePos - worldPos).xyz;
	V = normalize(V);
	vec3 Rone = reflect(-Lone,N);
	float sdp = clamp(sign(dppp) * dot(V,Rone),0.0,1.0);
	sdp = pow(sdp,32.0);
	
	tempspeck = litpct * sdp * lightColor.rgb;
	
	vec4 texc = texture2D(btexturetemp,vtexcoords);
	
	if(ddraw == 0.0){gl_FragColor.rgb=shadows.rgb;};
	if(ddraw==1.0){gl_FragColor.rgb=worldPos.xyz;}
	if(ddraw==2.0){gl_FragColor.rgb=normal.xyz;}
	if(ddraw==3.0){gl_FragColor.rgb=color.rgb;}
	if(ddraw==4.0){gl_FragColor.rgb=specular.rgb;}
	if(ddraw==5.0) // Full scene
	{
		gl_FragColor.rgb = diffuse.rgb * color.rgb;
		//gl_FragColor.rgb = diffuse.rgb;
		gl_FragColor.rgb += tempspeck.rgb;
	}
	gl_FragColor.a = 1.0;
}
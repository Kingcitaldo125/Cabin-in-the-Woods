precision highp float;

uniform sampler2D basetexture;
uniform sampler2D normalmap;

uniform mat4 worldMatrix;
uniform vec4 eyePos;

varying vec2 oTexcoord;
varying vec3 oNormal;
varying vec3 oTangent;
varying vec3 oWorldPos;

#define MAX_LIGHTS 1;

uniform vec4 lightPos;
uniform vec4 lightColor;

void main()
{
	vec3 bmap = texture2D(normalmap,oTexcoord.st).xyz;
	
	bmap *= 2.0;
	bmap -= vec3(1.0,1.0,1.0);
	bmap = normalize(bmap);
	
	// Gram-Schmidt
	vec3 N = normalize(oNormal.xyz);
	vec3 T = normalize(oTangent.xyz);
	T = T - dot(T,N)*N;
	T = normalize(T);
	
	vec3 B = cross(N,T);
	B = normalize(B);
	
	mat3 TangentNormal = mat3(T.x,B.x,N.x,
							  T.y,B.y,N.y,
							  T.z,B.z,N.z);
		 
	N = bmap * TangentNormal;
	
	N = (vec4(N.xyz,0.0) * worldMatrix).xyz;
	N = normalize(N);
	
	vec3 V = eyePos.xyz - oWorldPos.xyz;
	float eyeDist = length(V);
	V = 1.0/eyeDist*V;
	
	// Lighting Computations
	vec3 nn = normalize(oNormal.xyz);
	vec3 L = normalize(lightPos.xyz - oWorldPos.xyz);
	vec3 R = reflect(-L.xyz,N.xyz);
	
	vec4 ambient = vec4(0.0,0.0,0.0,0.0);
	float dd = clamp(dot(L,N),0.0,1.0);
	vec3 diffuse = dd*lightColor.rgb;
	vec3 specular = vec3(0.0,0.0,0.0);
	
	vec3 vv = normalize(eyePos.xyz - oWorldPos.xyz);
	float sp = pow(clamp(dot(V,R),0.0,1.0),32.0);
	specular = sp*lightColor.rgb;
	
	vec4 tc = texture2D(basetexture,oTexcoord);
	
	gl_FragColor.rgb = ambient.rgb + diffuse.rgb * tc.rgb;
	gl_FragColor.rgb += specular.rgb;
	gl_FragColor.a = 1.0;
}